---
- name: 'Include OS specific vars'
  ansible.builtin.include_vars: "{{ lookup('first_found', edge_image_builder_vars) }}"
  vars:
    edge_image_builder_vars:
      files:
        - "{{ ansible_facts['os_family'] }}{{ ansible_facts['distribution_major_version'] }}.yml"
        - "{{ ansible_facts['os_family'] }}.yml"
      paths:
        - 'vars'
  no_log: true

- name: 'Assert supported system'
  ansible.builtin.assert:
    that:
      - ansible_facts['os_family'] == 'RedHat'

- name: 'Ensure dependencies'
  ansible.builtin.package:
    name:
      - 'composer-cli'
      - 'createrepo_c'
      - 'httpd'
      - 'osbuild-composer'  # requires a reboot
      - 'ansible-core'
    state: 'present'
  notify: 'Reboot system'

- name: 'Ensure additional dependencies'
  ansible.builtin.package:
    name: "{{ edge_image_builder_additional_dependencies }}"
    state: 'present'

- name: 'Ensure services'
  ansible.builtin.service:
    name: "{{ service }}"
    state: 'started'
    enabled: true
  loop:
    - 'osbuild-composer.socket'
    - 'httpd.service'
  loop_control:
    loop_var: 'service'

- name: 'Ensure directories'
  ansible.builtin.file:
    path: "{{ directory }}"
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  loop:
    - '/etc/osbuild-composer/repositories'
    - '/etc/osbuild-composer/blueprints'
    - '/etc/osbuild-worker'
    - '/var/lib/tftpboot/pxelinux.cfg'
    - '/var/www/html/config-rpms'
    - '/var/cache/edge_image_builder'
  loop_control:
    loop_var: 'directory'

- name: 'Ensure Pullsecret for osbuild-worker'
  when: edge_image_builder_pull_secret | length > 0
  notify: 'Reboot system'
  block:
    - name: 'Configure pull-secret.json'
      ansible.builtin.copy:
        content: "{{ edge_image_builder_pull_secret }}"
        dest: '/etc/osbuild-worker/pull-secret.json'
        owner: 'root'
        group: 'root'
        mode: '0600'
    - name: 'Configure osbuild-worker'
      ansible.builtin.template:
        src: 'osbuild-worker.toml.j2'
        dest: '/etc/osbuild-worker/osbuild-worker.toml'
        owner: 'root'
        group: 'root'
        mode: '0644'

- name: 'Ensure default repository overrides'
  ansible.builtin.template:
    src: "{{ distro['id'] }}.json.j2"
    dest: "/etc/osbuild-composer/repositories/{{ distro['id'] }}.json"
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: 'Restart osbuild-composer'
  loop: "{{ edge_image_builder_distros }}"
  loop_control:
    loop_var: 'distro'

- name: 'Ensure extra repo definitions'
  ansible.builtin.template:
    src: 'osbuild-composer-repo.toml.j2'
    dest: "/etc/osbuild-composer/repositories/{{ repo['id'] }}.toml"
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop: "{{ edge_image_builder_repos + edge_image_builder_config_repo }}"
  loop_control:
    loop_var: 'repo'

- name: 'Import extra repo definitions'
  ansible.builtin.command: /usr/bin/composer-cli sources add /etc/osbuild-composer/repositories/{{ repo['id'] }}.toml
  changed_when: true  # The command does not tell you if anything has changed
  loop: "{{ edge_image_builder_repos + edge_image_builder_config_repo }}"
  loop_control:
    loop_var: 'repo'

- name: 'Download Boot ISOs for distributions'
  ansible.builtin.get_url:
    url: "{{ distro['bootiso_url'] }}"
    url_username: "{{ distro['bootiso_username'] | default(omit) }}"
    url_password: "{{ distro['bootiso_password'] | default(omit) }}"
    dest: "/var/cache/edge_image_builder/boot-{{ distro['id'] }}.iso"
    force: false
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop: "{{ edge_image_builder_distros }}"
  loop_control:
    loop_var: 'distro'

- name: 'Ensure webserver directories'
  ansible.builtin.file:
    path: "/var/www/html/{{ distro['id'] }}"
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  loop: "{{ edge_image_builder_distros }}"
  loop_control:
    loop_var: 'distro'

- name: 'Extract liveboot image from ISOs'
  community.general.iso_extract:
    image: "/var/cache/edge_image_builder/boot-{{ distro['id'] }}.iso"
    dest: "/var/www/html/{{ distro['id'] }}"
    files:
      - 'images/install.img'
      - 'images/pxeboot/initrd.img'
      - 'images/pxeboot/vmlinuz'
  loop: "{{ edge_image_builder_distros }}"
  loop_control:
    loop_var: 'distro'

- name: 'Configure deployment server'
  ansible.builtin.include_tasks: 'tasks/deployment_server.yml'
  when: edge_image_builder_deployment_server | bool
