---
- name: 'Ensure packages'
  ansible.builtin.package:
    name:
      - 'dhcp-server'
      - 'tftp-server'
      - 'syslinux'
    state: 'present'

- name: 'Download extra bootloader RPM files'  # The dnf module does not download anything if it's already installed
  ansible.builtin.shell: |
    set -o pipefail
    cd /var/cache/edge_image_builder
    dnf download shim-x64 grub2-efi-x64
  changed_when: true

- name: 'Extract RPM files'
  ansible.builtin.shell: |
    set -o pipefail
    cd /var/cache/edge_image_builder
    rpm2cpio /var/cache/edge_image_builder/shim-x64-*.rpm | cpio -idm
    rpm2cpio /var/cache/edge_image_builder/grub2-efi-x64-*.rpm | cpio -idm
  changed_when: true

- name: 'Ensure configuration files'
  ansible.builtin.template:
    src: "{{ config['src'] }}"
    dest: "{{ config['dest'] }}"
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: "{{ config['notify'] }}"
  loop:
    - src: 'dhcpd.conf.j2'
      dest: '/etc/dhcp/dhcpd.conf'
      notify: 'Restart dhcpd'
  loop_control:
    loop_var: 'config'

- name: 'Ensure bootloader files for BIOS'
  ansible.builtin.copy:
    src: "/usr/share/syslinux/{{ bios_bootloader }}"
    dest: "/var/lib/tftpboot/{{ bios_bootloader }}"
    owner: 'root'
    group: 'root'
    mode: '0644'
    remote_src: true
  loop:
    - 'ldlinux.c32'
    - 'libutil.c32'
    - 'menu.c32'
    - 'pxelinux.0'
  loop_control:
    loop_var: 'bios_bootloader'

- name: 'Ensure bootloader files for UEFI'
  ansible.builtin.copy:
    src: "/var/cache/edge_image_builder/boot/efi/EFI/redhat/{{ uefi_bootloader }}"
    dest: "/var/lib/tftpboot/{{ uefi_bootloader }}"
    owner: 'root'
    group: 'root'
    mode: '0644'
    remote_src: true
  loop:
    - 'grubx64.efi'
    - 'shim.efi'
  loop_control:
    loop_var: 'uefi_bootloader'

- name: 'Ensure TFTP directories'
  ansible.builtin.file:
    path: "/var/lib/tftpboot/{{ distro['id'] }}"
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  loop: "{{ edge_image_builder_distros }}"
  loop_control:
    loop_var: 'distro'

- name: 'Extract TFTP boot images from ISOs'
  community.general.iso_extract:
    image: "/var/cache/edge_image_builder/boot-{{ distro['id'] }}.iso"
    dest: "/var/lib/tftpboot/{{ distro['id'] }}"
    files:
      - 'images/pxeboot/initrd.img'
      - 'images/pxeboot/vmlinuz'
  loop: "{{ edge_image_builder_distros }}"
  loop_control:
    loop_var: 'distro'

- name: 'Ensure services'
  ansible.builtin.service:
    name: "{{ service }}"
    state: 'started'
    enabled: true
  loop:
    - 'dhcpd'
    - 'tftp.socket'
  loop_control:
    loop_var: 'service'
